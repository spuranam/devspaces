## https://devfile.io/docs/2.1.0/devfile-schema
schemaVersion: 2.1.0
metadata:
  name: devspaces-sample
  version: 1.0.0
attributes:
  controller.devfile.io/storage-type: per-workspace # per-user | per-workspace | ephemeral
  controller.devfile.io/scc: container-build
components:
  - name: tools
    container:
      image: registry.ford.com/devspaces/udi-ubi8:20221204-0028
      command:
        - /entrypoint.sh
      memoryLimit: 6Gi
      memoryRequest: 1Gi
      cpuLimit: 4000m
      cpuRequest: 1000m
      mountSources: true
      env:
        #- name: GOCACHE
        #  value: /tmp/.cache
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /var/run/secrets/google/credentials_config.json
        - name: CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE
          value: /var/run/secrets/google/credentials_config.json
      endpoints:
        - name: webapp
          targetPort: 8080 ## Go sample listens on 8080
          #path: /hello
          protocol: https
          exposure: public # public | internal | none
          secure: true
          #attributes:
          #  urlRewriteSupported: false
      ##volumeMounts:
      ##  - name: m2volume
      ##    path: /home/user/.m2
      ##  - name: seleniumvolume
      ##    path: /dev/shm
  - name: hugo
    container:
      image: registry.ford.com/pipelines/hugo:0.107.0
      args: ["tail", "-f", "/dev/null"]
      memoryLimit: 2Gi
      memoryRequest: 500Mi
      cpuLimit: 2000m
      cpuRequest: 500m
      mountSources: true
      endpoints:
        - name: hugo-server
          targetPort: 1313
          protocol: https
          exposure: public # public | internal | none
          secure: true
  #- name: projects
  #  #volume: { ephemeral: true }
  #  volume:
  #    size: 3Gi
  #- name: m2volume
  #  volume:
  #    size: 3G
  #- name: seleniumvolume
  #  volume:
  #    size: 3G
events:
  postStart:
    - init-devspace
  #preStart:
  #  - install-dependencies-go-hello-world
commands:
  - id: init-devspace
    exec:
      label: "init devspace"
      component: tools
      workingDir: ${PROJECTS_ROOT}
      commandLine: |
        #!/usr/bin/env bash

        if ! /checode/checode-linux-libc/bin/remote-cli/code-oss --list-extensions | grep -E 'googlecloudtools.cloudcode' >/dev/null 2>&1; then
          /checode/checode-linux-libc/bin/remote-cli/code-oss --install-extension ${HOME}/vscode-extensions/cloudcode.vsix --force
        fi

        if [[ -f ${HOME}/secrets/.dockerconfigjson ]]; then
          mkdir -p ${HOME}/.docker
          ln -sfv ${HOME}/secrets/.dockerconfigjson ${HOME}/.docker/config.json
        fi
  - id: gcloud-auth
    exec:
      label: "GCLOUD: gcloud auth"
      component: tools
      workingDir: ${PROJECTS_ROOT}
      commandLine: |
        gcloud auth login --update-adc --add-quota-project-to-adc --quiet --verbosity warning
  - id: install-dependencies-go-hello-world
    exec:
      label: "GO: install dependencies"
      component: tools
      workingDir: ${PROJECT_SOURCE}/go-hello-world
      commandLine: "go mod download"
      group:
        kind: build
  - id: run-go-hello-world
    exec:
      label: "GO: start hello world"
      component: tools
      workingDir: ${PROJECT_SOURCE}/go-hello-world
      commandLine: "go run main.go"
      group:
        kind: run
        isDefault: true
  - id: build-go-hello-world
    exec:
      label: "GO: build hello world"
      component: tools
      workingDir: ${PROJECT_SOURCE}/go-hello-world
      commandLine: "go build -o /tmp/hello-world -v ."
      group:
        kind: build
        isDefault: true
  - id: test-go-hello-world
    exec:
      label: "GO: test hello world"
      component: tools
      workingDir: ${PROJECT_SOURCE}/go-hello-world
      commandLine: "go test -v ./..."
      group:
        kind: test
  - id: build-go-hello-world
    exec:
      label: "GO: build container image"
      component: tools
      workingDir: ${PROJECT_SOURCE}/go-hello-world
      commandLine: |
        podman build \
        --authfile=${HOME}/.docker/config.json \
        --format=oci \
        --network=host \
        -t registry.ford.com/devspace/go-hello-world:latest \
        -f Dockerfile \
        ${PROJECT_SOURCE}/go-hello-world
      group:
        kind: build
  - id: file
    exec:
      label: "GO: run current file"
      component: tools
      workingDir: ${fileDirname}
      commandLine: "go get -d && go run ${file}"
      group:
        kind: run
  - id: stop
    exec:
      label: "GO: stop hello-world"
      component: tools
      workingDir: ${PROJECT_SOURCE}
      commandLine: "kill $(pidof go)"
      group:
        kind: run
  - id: start-hugo-server
    exec:
      label: "HUGO: start hugo server"
      component: hugo
      commandLine: |
        #alias hugo="kubectl exec -it $(kubectl get po -l controller.devfile.io/devworkspace_name=${DEVWORKSPACE_NAME} -o=custom-columns=NAME:.metadata.name --no-headers=true) -c hugo -- hugo $@"
        #WORKSPACE_POD=$(kubectl get po -l controller.devfile.io/devworkspace_name=${DEVWORKSPACE_NAME} -o=custom-columns=NAME:.metadata.name --no-headers=true)
        #kubectl exec -it ${WORKSPACE_POD} -c hugo -- hugo --help

        hugo server \
        --baseURL=https://${DEVWORKSPACE_ID}-1.$(echo -n ${CHE_DASHBOARD_URL} | cut -d'.' -f2- | tr -d '/') \
        --appendPort=false \
        --bind=0.0.0.0 \
        --renderToDisk \
        --cleanDestinationDir \
        --gc \
        --cacheDir=/tmp/hugo_cache/ \
        --source=${PROJECT_SOURCE}/gcp-docs \
        --destination=/tmp/hugo-public \
        --liveReloadPort=443
      workingDir: "${PROJECT_SOURCE}/gcp-docs"
      group:
        kind: run
        isDefault: true
  - id: stop-hugo-server
    exec:
      label: "HUGO: stop hugo server"
      component: hugo
      commandLine: "kill $(pidof hugo)"
      workingDir: "${PROJECT_SOURCE}/gcp-docs"
      group:
        kind: run
