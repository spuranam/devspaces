schemaVersion: 2.1.0
metadata:
  name: devspaces-sample
  version: 1.0.0
attributes:
  controller.devfile.io/storage-type: per-workspace # per-user | per-workspace | ephemeral
  controller.devfile.io/scc: container-build
components:
  - name: tools
    container:
      image: registry.ford.com/devspaces/udi-ubi8:20221211-2341
      command:
        - /entrypoint.sh
      memoryLimit: 6Gi
      memoryRequest: 1Gi
      cpuLimit: 4000m
      cpuRequest: 1000m
      mountSources: true
      env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /var/run/secrets/google/credentials_config.json
        - name: CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE
          value: /var/run/secrets/google/credentials_config.json
      endpoints:
        - name: webapp
          targetPort: 8080
          protocol: https
          exposure: public
          secure: true
  - name: hugo
    container:
      image: registry.ford.com/pipelines/hugo:0.108.0
      args: ["tail", "-f", "/dev/null"]
      memoryLimit: 2Gi
      memoryRequest: 500Mi
      cpuLimit: 2000m
      cpuRequest: 500m
      mountSources: true
      endpoints:
        - name: hugo-server
          targetPort: 1313
          protocol: https
          exposure: public
          secure: true
events:
  postStart:
    - init
  #preStart:
  #  - init
commands:
  - id: init
    exec:
      label: "init"
      component: tools
      workingDir: ${PROJECTS_ROOT}
      commandLine: |
        HOME=/checode/home/user # <- DO NOT CHANGE THIS

        ### export PATH environment variable using ~/.zshrc
        mkdir -p ${HOME}/init
        echo "export PATH=${PATH}:\$PATH" > ${HOME}/init/path.sh

        ## Configure docker secrets
        if [[ -f /etc/secrets/docker/.dockerconfigjson ]]; then
          mkdir -p ${HOME}/.docker
          ln -sfv /etc/secrets/docker/.dockerconfigjson ${HOME}/.docker/config.json;
        fi

        ## Enable GCP WIF
        ## error: failed to create token: serviceaccounts "devspace" is forbidden:
        ## User "system:serviceaccount:spuranam-ford-com-devspaces:workspacee46c9581fbf5462a-sa"
        ## cannot create resource "serviceaccounts/token" in API group "" in the namespace
        ## "spuranam-ford-com-devspaces"
        #if [[ -f /var/run/secrets/google/*.json ]]; then
        #  TOKEN=$(jq -r '.credential_source.file' /var/run/secrets/google/*.json)
        #  mkdir -p ${TOKEN%/*}
        #  nohup watch -n 3000 "kubectl create token devspace --duration=1h --audience=openshift > ${TOKEN}" &>/dev/null &
        #  #nohup watch -n 10 'date --utc "+%Y-%m-%d %H:%M:%S" >> /tmp/date' &
        #fi

        ## Add alias to refer to tools/utilities from secondary containers
        mkdir -p ${HOME}/init
        cat << 'EOF' > ${HOME}/init/aliases.sh
        alias hugo="kubectl exec -it \$(kubectl get po -l controller.devfile.io/devworkspace_name=\${DEVWORKSPACE_NAME} -o=custom-columns=NAME:.metadata.name --no-headers=true) -c hugo -- hugo \$@"
        EOF

        ## A workaround for bad git config created by devspaces "git config --list"
        git config --global user.email "$(git config user.name)"

  - id: install-dependencies-go-hello-world
    exec:
      label: "GO: install dependencies"
      component: tools
      workingDir: ${PROJECT_SOURCE}/go-hello-world
      commandLine: "go mod download"
      group:
        kind: build
  - id: run-go-hello-world
    exec:
      label: "GO: start hello world"
      component: tools
      workingDir: ${PROJECT_SOURCE}/go-hello-world
      commandLine: "go run main.go"
      group:
        kind: run
        isDefault: true
  - id: build-go-hello-world
    exec:
      label: "GO: build hello world"
      component: tools
      workingDir: ${PROJECT_SOURCE}/go-hello-world
      commandLine: "go build -o /tmp/hello-world -v ."
      group:
        kind: build
        isDefault: true
  - id: test-go-hello-world
    exec:
      label: "GO: test hello world"
      component: tools
      workingDir: ${PROJECT_SOURCE}/go-hello-world
      commandLine: "go test -v ./..."
      group:
        kind: test
  - id: build-go-hello-world
    exec:
      label: "GO: build container image"
      component: tools
      workingDir: ${PROJECT_SOURCE}/go-hello-world
      commandLine: |
        podman build \
        --authfile=${HOME}/.docker/config.json \
        --format=oci \
        --network=host \
        -t registry.ford.com/devspace/go-hello-world:latest \
        -f Dockerfile \
        ${PROJECT_SOURCE}/go-hello-world
      group:
        kind: build
  - id: file
    exec:
      label: "GO: run current file"
      component: tools
      workingDir: ${fileDirname}
      commandLine: "go get -d && go run ${file}"
      group:
        kind: run
  - id: stop
    exec:
      label: "GO: stop hello-world"
      component: tools
      workingDir: ${PROJECT_SOURCE}
      commandLine: "kill $(pidof go)"
      group:
        kind: run
  - id: start-hugo-server
    exec:
      label: "HUGO: start hugo server"
      component: hugo
      commandLine: |
        hugo server \
        --baseURL=https://${DEVWORKSPACE_ID}-1.$(echo -n ${CHE_DASHBOARD_URL} | cut -d'.' -f2- | tr -d '/') \
        --appendPort=false \
        --bind=0.0.0.0 \
        --renderToDisk \
        --cleanDestinationDir \
        --gc \
        --cacheDir=/tmp/hugo_cache/ \
        --source=${PROJECT_SOURCE}/gcp-docs \
        --destination=/tmp/hugo-public \
        --liveReloadPort=443
      workingDir: "${PROJECT_SOURCE}/gcp-docs"
      group:
        kind: run
        isDefault: true
  - id: stop-hugo-server
    exec:
      label: "HUGO: stop hugo server"
      component: hugo
      commandLine: "kill $(pidof hugo)"
      workingDir: "${PROJECT_SOURCE}/gcp-docs"
      group:
        kind: run
